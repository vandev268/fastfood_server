// 1. @default -> Sets a default value for the field. Not nullable.
// 2. Type? -> Indicates that the field is optional (nullable).
// -> Only use 1 or 2, not both.

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @db.VarChar(500)
  password    String    @db.VarChar(500)
  name        String    @db.VarChar(500) @default("")
  phoneNumber String    @db.VarChar(50) @default("")
  avatar      String?   @db.VarChar(1000)
  dateOfBirth DateTime?
  totpSecret  String?   @db.VarChar(1000)
  status      UserStatus @default(Active)
  roleId                      Int
  role                        Role                  @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  refreshTokens               RefreshToken[]
  addresses                   Address[]
  carts                       CartItem[]
  reservations                Reservation[]

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@index([deletedAt])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @db.VarChar(1000) @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
}

model VerificationCode {
  id    Int                  @id @default(autoincrement())
  email String               @db.VarChar(500)
  code  String               @db.VarChar(50)
  type  VerificationCodeType
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([email, type])
  @@index([expiresAt])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(500)
  description String       @default("")
  isActive    Boolean      @default(true)
  permissions Permission[]
  users       User[]

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Permission {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(500)
  description String     @default("")
  path        String     @db.VarChar(1000)
  method      HTTPMethod
  module      String     @db.VarChar(500) @default("")
  roles       Role[]

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Address {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  recipientName   String   @db.VarChar(500)
  recipientPhone  String   @db.VarChar(50)
  provinceId      Int
  province        Province @relation(fields: [provinceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  districtId      Int
  district        District @relation(fields: [districtId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  wardId          Int
  ward            Ward     @relation(fields: [wardId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  detailAddress   String
  deliveryNote    String   @default("")
  isDefault       Boolean  @default(false)

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([deletedAt])
}

model Province {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(500)
  nameEn    String     @db.VarChar(500)
  latitude  String     @db.VarChar(50)
  longitude String     @db.VarChar(50)
  districts District[]
  addresses Address[]
}

model District {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(500)
  nameEn     String    @db.VarChar(500)
  latitude   String    @db.VarChar(50)
  longitude  String    @db.VarChar(50)
  provinceId Int
  province   Province  @relation(fields: [provinceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  wards      Ward[]
  addresses  Address[]
}

model Ward {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(500)
  nameEn     String    @db.VarChar(500)
  latitude   String    @db.VarChar(50)
  longitude  String    @db.VarChar(50)
  districtId Int
  district   District  @relation(fields: [districtId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  addresses  Address[]
}

model Product {
  id            Int           @id @default(autoincrement())
  type          ProductType   @default(Single)
  name          String        @db.VarChar(1000)
  basePrice     Float
  shortDescription String        @default("")
  description   String        @default("")
  images        String[]
  status        ProductStatus @default(Pending)
  /// [ProductVariants]
  variantsConfig Json
  categories    Category[]
  tags          Tag[]
  variants      Variant[]

  deletedAt DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([deletedAt])
}

model Variant {
  id         Int     @id @default(autoincrement())
  productId  Int
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  value      String   @db.VarChar(1000)
  thumbnail  String?
  price      Float
  stock      Int

  cartItems  CartItem[]
  draftItems DraftItem[]

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([productId])
  @@index([deletedAt])
}

model Category {
  id               Int        @id @default(autoincrement())
  name             String     @db.VarChar(500)
  thumbnail         String?    @db.VarChar(1000)
  parentCategoryId Int?
  parentCategory   Category?  @relation("ParentCategoryCategories", fields: [parentCategoryId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  childCategories  Category[] @relation("ParentCategoryCategories")
  description      String     @default("")
  products         Product[]

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([deletedAt])
}

model Tag {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(500)
  type        TagType
  description String    @default("")
  products    Product[]

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([deletedAt])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  variantId Int
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, variantId])
  @@index([userId])
}

model Table {
  id        Int         @id @default(autoincrement())
  code      String      @db.VarChar(50)
  capacity  Int
  status    TableStatus @default(Available)
  location  TableLocation
  draftItems DraftItem[]
  reservations Reservation[]

  deletedAt DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([deletedAt])
}

model DraftItem {
  id        Int      @id @default(autoincrement())
  draftCode String   @db.VarChar(500)
  status    DraftItemStatus @default(Pending)
  quantity  Int
  tables    Table[] 
  variantId Int
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  
  createdAt DateTime @default(now())

  @@index([draftCode])
  @@unique([draftCode, variantId])
}

model Reservation {
  id              Int           @id @default(autoincrement())
  guestName       String        @db.VarChar(500)
  guestPhone      String        @db.VarChar(50)
  numberOfGuest   Int
  reservationTime DateTime
  status          ReservationStatus
  note            String        @default("")
  userId          Int?
  user            User?         @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  tableId         Int
  table           Table         @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

enum UserStatus {
  Active
  Inactive
  Blocked
}

enum VerificationCodeType {
  Register
  ForgotPassword
  Login2FA
  Disable2FA
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

enum ProductType {
  Single
  FixedCombo
  CustomCombo
}

enum ProductStatus {
  Pending
  Available
  OutOfStock
  Hidden
}

enum TagType {
  Spice
  Marketing
  Seasonal
  Custom
}

enum TableStatus {
  Available
  Occupied
  Reserved
  Cleaning
  Disabled
}

enum TableLocation {
  Floor1
  Floor2
  Floor3
  Outdoor
  Balcony
  PrivateRoom
}

enum DraftItemStatus {
  Pending
  Preparing
  Ready
  Served
}

enum ReservationStatus {
  Pending
  Confirmed
  Arrived
  Completed
  Cancelled
}